{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
class intt\{\
    int val;\
    int height;\
    intt(int x, int y)\{\
        val = x;\
        height = y;\
    \}\
\}\
public class Solution \{\
    Map<Integer,ArrayList<intt>> map = new HashMap<Integer, ArrayList<intt>>();\
    public List<List<Integer>> verticalOrder(TreeNode root) \{\
        List<List<Integer>> list = new ArrayList<>();\
        traverse(root, 0, 0);\
        List<Integer> in = new ArrayList<>();\
        for(int i: map.keySet())\{\
            in.add(i);\
        \}\
        Collections.sort(in);\
        for(int i : in)\{\
            Collections.sort(map.get(i), new Comparator<intt>()\{\
                public int compare(intt a, intt b)\{\
                    if((a.height - b.height) > 0) return 1;\
                    else if(a.height == b.height) return 0;\
                    else return -1;\}\});\
            List<Integer> temp = new ArrayList<Integer>();\
            for(intt ss : map.get(i))\{\
                temp.add(ss.val);\
            \}    \
            list.add(temp);\
        \}\
        return list;\
    \}\
    private void traverse(TreeNode root, int cur, int height)\{\
        if(root == null) return;\
        if(!map.containsKey(cur))\{\
            map.put(cur, new ArrayList<intt>());\
        \}\
        map.get(cur).add(new intt(root.val, height));\
        traverse(root.left, cur - 1, height + 1);\
        traverse(root.right, cur + 1, height + 1);\
    \}\
\}}